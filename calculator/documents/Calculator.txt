Brackets -> Exponents -> Divison -> Multiplication -> Addition -> Subtraction

Input: (1 + 3) - 2^(3) //string equation
Output: -4

	-
     / \
   +     ^
  / \   / \
 1   3  2  3

Build Tree Algorithm Rules: 
1. '(' indicates a new node, add a new left node and traverse to the left node.
2. '+','-','*','/','^' indicates an opperator create a right node and set the value of current node to the opperator
3. if the token is a number, then set current value as the number and traverse to parent.
4 ')' end of line, traverse to parent.

Calculate Tree Algorithm:
calc(tree):
	if value.isInteger:
		return value

	leftNumber = calc(tree.left)
	rightNumber = calc(tree.right)
	
	return opperator(value, leftNumber, rightNumber)

opperator(oppCode, left, right):
	switch(oppCode):
		'^': return left.exp(right)
		'/': return left/right
		'*': return left*right
		'+': return left+right
		'-': return left-right
